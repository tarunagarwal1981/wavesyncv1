name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run type checking
      run: npx tsc --noEmit
    
    - name: Run unit tests
      run: npm run test:ci
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unit-tests
        name: unit-tests-${{ matrix.node-version }}

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npm run test:setup
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: Start application
      run: npm start &
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        PORT: 3000
    
    - name: Wait for application
      run: npx wait-on http://localhost:3000    -t 60000
    
    - name: Run Playwright tests
      run: npm run test:e2e
      env:
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        PLAYWRIGHT_BASE_URL: http://localhost:3000
    
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npm run test:setup
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: npm start &
    
    - name: Wait for application
      run: npx wait-on http://localhost:3000 -t 60000
    
    - name: Run visual regression tests
      run: npx playwright test --project=chromium --grep="@visual"
    
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: visual-regression-screenshots
        path: test-results/
        retention-days: 30

  lighthouse-ci:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: npm start &
    
    - name: Wait for application
      run: npx wait-on http://localhost:3000 -t 60000
    
    - name: Run Lighthouse CI
      run: lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    
    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-reports
        path: .lighthouseci/
        retention-days: 30

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npm run test:setup
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: npm start &
    
    - name: Wait for application
      run: npx wait-on http://localhost:3000 -t 60000
    
    - name: Install axe-core
      run: npm install --save-dev @axe-core/playwright
    
    - name: Run accessibility tests
      run: npx playwright test --grep="@accessibility"
    
    - name: Upload accessibility reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-reports
        path: accessibility-reports/
        retention-days: 30

  matrix-compatibility:
    name: Compatibility Tests
    runs-on: ${{ matrix.os }}
    needs: unit-tests
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chromium, firefox, webkit]
        
        exclude:
          - os: windows-latest
            browser: firefox
          - os: macos-latest
            browser: webkit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npm run test:setup
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: npm start &
    
    - name: Wait for application
      run: npx wait-on http://localhost:3000 -t 60000
    
    - name: Run compatibility tests
      run: npx playwright test --project=${{ matrix.browser }} --grep="@critical"

  deployment-smoke-tests:
    name: Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: ['unit-tests', 'e2e-tests']
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npm run test:setup
    
    - name: Run smoke tests against production
      run: npm run test:e2e -- --config=playwright.staging.config.ts
      env:
        PLAYWRIGHT_BASE_URL: ${{ secrets.STAGING_URL }}
        TEST_USER_EMAIL: ${{ secrets.PROD_TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.PROD_TEST_USER_PASSWORD }}
    
    - name: Upload production smoke test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: production-smoke-reports
        path: playwright-report/
        retention-days: 7

  test-report:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, visual-regression-tests, lighthouse-ci, security-tests, accessibility-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download unit test coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
      continue-on-error: true
    
    - name: Download e2e test reports
      uses: actions/download-artifact@v4
      with:
        name: playwright-report
        path: playwright-report/
      continue-on-error: true
    
    - name: Generate test summary
      run: |
        echo "## ðŸ§ª Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} | All components and utilities tested |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} | End-to-end user workflows validated |" >> $GITHUB_STEP_SUMMARY
        echo "| Visual Tests | ${{ needs.visual-regression-tests.result }} | UI consistency verified |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ needs.lighthouse-ci.result }} | Lighthouse metrics checked |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security-tests.result }} | Vulnerability scan completed |" >> $GITHUB_STEP_SUMMARY
        echo "| Accessibility | ${{ needs.accessibility-tests.result }} | WCAG compliance verified |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "Test coverage and performance metrics available in artifacts." >> $GITHUB_STEP_SUMMARY
